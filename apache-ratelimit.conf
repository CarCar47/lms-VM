# ============================================================================
# Apache Rate Limiting Configuration for Moodle 5.1
# Ubuntu 22.04 LTS with Apache 2.4
# ============================================================================
#
# This configuration provides DDoS protection and rate limiting using:
# - mod_evasive: Request-based rate limiting
# - mod_security: Advanced security rules and rate limiting
# - mod_reqtimeout: Slow request protection
#
# Installation:
#   1. Run: sudo bash setup-apache-ratelimit.sh
#   2. This file will be copied to: /etc/apache2/conf-available/ratelimit.conf
#   3. Enable: sudo a2enconf ratelimit
#   4. Reload: sudo systemctl reload apache2
#
# ============================================================================

# ============================================================================
# mod_evasive Configuration
# ============================================================================
#
# mod_evasive provides lightweight DDoS protection by tracking requests
# and temporarily blocking IPs that exceed thresholds.
#
# Installation: apt-get install libapache2-mod-evasive
#
# ============================================================================

<IfModule mod_evasive20.c>
    # Directory for lock files (must be writable by Apache)
    DOSHashTableSize    3097
    DOSPageCount        5        # Max requests to same page in interval
    DOSSiteCount        50       # Max requests to site in interval
    DOSPageInterval     1        # Page count interval (seconds)
    DOSSiteInterval     1        # Site count interval (seconds)

    # Block IP for this duration after threshold exceeded
    DOSBlockingPeriod   10       # Seconds to block offending IP

    # Email notification (optional, requires mail setup)
    # DOSEmailNotify     admin@yourdomain.com

    # System command to run when IP is blocked (optional)
    # DOSSystemCommand   "sudo /sbin/iptables -I INPUT -s %s -j DROP"

    # Whitelist trusted IPs (monitoring, load balancers, etc.)
    # DOSWhitelist       127.0.0.1
    # DOSWhitelist       10.0.0.0/8        # Private network
    # DOSWhitelist       172.16.0.0/12     # Private network
    # DOSWhitelist       192.168.0.0/16    # Private network

    # Log directory (must be writable by Apache)
    DOSLogDir          "/var/log/mod_evasive"
</IfModule>

# ============================================================================
# mod_reqtimeout Configuration
# ============================================================================
#
# Protects against slowloris and slow POST attacks
# Enabled by default in Apache 2.4
#
# ============================================================================

<IfModule mod_reqtimeout.c>
    # Header timeout: 20-40 seconds, min rate 500 bytes/sec
    RequestReadTimeout header=20-40,MinRate=500

    # Body timeout: 20 seconds + 10 seconds per 1000 bytes, min rate 500 bytes/sec
    RequestReadTimeout body=20,MinRate=500
</IfModule>

# ============================================================================
# Connection and Timeout Limits
# ============================================================================

# Limit request line size (protects against buffer overflow)
LimitRequestLine 8190

# Limit request header field size
LimitRequestFieldSize 8190

# Limit number of request header fields
LimitRequestFields 100

# Limit request body size (100MB - matches PHP upload limit)
LimitRequestBody 104857600

# Timeout for requests (matches nginx configuration)
Timeout 60

# ============================================================================
# mod_security Configuration (if installed)
# ============================================================================
#
# ModSecurity provides advanced WAF capabilities including rate limiting.
# Installation: apt-get install libapache2-mod-security2
#
# ============================================================================

<IfModule security2_module>
    # Enable ModSecurity
    SecRuleEngine On

    # Request body handling
    SecRequestBodyAccess On
    SecRequestBodyLimit 104857600          # 100MB
    SecRequestBodyNoFilesLimit 1048576     # 1MB for non-file uploads

    # Response body handling
    SecResponseBodyAccess Off

    # Audit logging
    SecAuditEngine RelevantOnly
    SecAuditLogRelevantStatus "^(?:5|4(?!04))"
    SecAuditLogParts ABIJDEFHZ
    SecAuditLogType Serial
    SecAuditLog /var/log/apache2/modsec_audit.log

    # Debug log (disable in production)
    SecDebugLog /var/log/apache2/modsec_debug.log
    SecDebugLogLevel 0

    # Upload directory
    SecTmpDir /tmp
    SecDataDir /tmp

    # ========================================================================
    # Rate Limiting Rules
    # ========================================================================

    # Initialize IP collection for rate limiting
    SecAction "id:900001,phase:1,nolog,pass,initcol:ip=%{REMOTE_ADDR}"

    # General rate limit: 100 requests per 60 seconds
    SecRule IP:REQUEST_COUNT "@gt 100" \
        "id:900002,phase:1,deny,status:429,msg:'Rate limit exceeded: General',\
        setvar:ip.blocked=1,expirevar:ip.blocked=60"

    # Increment request counter
    SecAction "id:900003,phase:1,nolog,pass,setvar:ip.request_count=+1,expirevar:ip.request_count=60"

    # Login endpoint rate limit: 5 requests per minute
    SecRule REQUEST_URI "@rx /login/(index\.php|token\.php)" \
        "id:900010,phase:1,chain,nolog,pass"
        SecAction "setvar:ip.login_count=+1,expirevar:ip.login_count=60"

    SecRule IP:LOGIN_COUNT "@gt 5" \
        "id:900011,phase:1,deny,status:429,msg:'Rate limit exceeded: Login attempts',\
        setvar:ip.blocked=1,expirevar:ip.blocked=300"

    # API endpoint rate limit: 200 requests per 60 seconds
    SecRule REQUEST_URI "@rx ^/webservice/" \
        "id:900020,phase:1,chain,nolog,pass"
        SecAction "setvar:ip.api_count=+1,expirevar:ip.api_count=60"

    SecRule IP:API_COUNT "@gt 200" \
        "id:900021,phase:1,deny,status:429,msg:'Rate limit exceeded: API',\
        setvar:ip.blocked=1,expirevar:ip.blocked=60"

    # Upload rate limit: 10 uploads per 5 minutes
    SecRule REQUEST_URI "@rx /(upload|file)\.php" \
        "id:900030,phase:1,chain,nolog,pass"
        SecAction "setvar:ip.upload_count=+1,expirevar:ip.upload_count=300"

    SecRule IP:UPLOAD_COUNT "@gt 10" \
        "id:900031,phase:1,deny,status:429,msg:'Rate limit exceeded: Uploads',\
        setvar:ip.blocked=1,expirevar:ip.blocked=300"

    # Block if IP is marked as blocked
    SecRule IP:BLOCKED "@eq 1" \
        "id:900099,phase:1,deny,status:429,msg:'IP temporarily blocked due to rate limit violation'"

    # ========================================================================
    # Additional Security Rules
    # ========================================================================

    # Block common attack patterns
    SecRule ARGS "@rx <script" \
        "id:900100,phase:2,deny,status:403,msg:'XSS attack detected'"

    SecRule ARGS "@rx (union.*select|insert.*into|delete.*from)" \
        "id:900101,phase:2,deny,status:403,msg:'SQL injection detected'"

    # Block suspicious user agents
    SecRule HTTP_USER_AGENT "@rx (nikto|sqlmap|nmap|masscan|metasploit)" \
        "id:900102,phase:1,deny,status:403,msg:'Malicious user agent detected'"

    # Block directory traversal attempts
    SecRule REQUEST_URI "@rx \.\." \
        "id:900103,phase:1,deny,status:403,msg:'Directory traversal detected'"

</IfModule>

# ============================================================================
# Apache Performance and Connection Limits
# ============================================================================

<IfModule mpm_prefork_module>
    # Limit concurrent connections
    StartServers             5
    MinSpareServers          5
    MaxSpareServers         10
    MaxRequestWorkers      150
    MaxConnectionsPerChild   3000
</IfModule>

<IfModule mpm_worker_module>
    # Worker MPM settings
    StartServers             2
    MinSpareThreads         25
    MaxSpareThreads         75
    ThreadLimit             64
    ThreadsPerChild         25
    MaxRequestWorkers      150
    MaxConnectionsPerChild   3000
</IfModule>

<IfModule mpm_event_module>
    # Event MPM settings (recommended for high traffic)
    StartServers             2
    MinSpareThreads         25
    MaxSpareThreads         75
    ThreadLimit             64
    ThreadsPerChild         25
    MaxRequestWorkers      150
    MaxConnectionsPerChild   3000
</IfModule>

# ============================================================================
# Custom Error Pages for Rate Limiting
# ============================================================================

# Custom 429 error page
ErrorDocument 429 "Too Many Requests - You have exceeded the rate limit. Please try again later."

# ============================================================================
# Logging
# ============================================================================

# Log format with rate limiting information
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %D" combined_with_time

# ============================================================================
# NOTES
# ============================================================================
#
# Testing Rate Limits:
#   # Test general rate limit
#   ab -n 200 -c 10 http://your-server/
#
#   # Test login rate limit
#   ab -n 20 -c 5 http://your-server/login/index.php
#
# Monitoring:
#   # Check mod_evasive blocks
#   tail -f /var/log/mod_evasive/*
#
#   # Check ModSecurity audit log
#   tail -f /var/log/apache2/modsec_audit.log
#
#   # Check Apache error log
#   tail -f /var/log/apache2/error.log
#
# Whitelisting IPs:
#   # Add to mod_evasive whitelist above
#   DOSWhitelist 1.2.3.4
#
#   # Add to ModSecurity whitelist
#   SecRule REMOTE_ADDR "@ipMatch 1.2.3.4" "id:900999,phase:1,nolog,pass,ctl:ruleEngine=Off"
#
# Adjusting Limits:
#   - For small installations (< 100 users): Use default settings
#   - For medium installations (100-1000 users): Increase DOSSiteCount to 100
#   - For large installations (> 1000 users): Consider nginx reverse proxy
#
# ============================================================================
